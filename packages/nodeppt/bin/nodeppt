#!/usr/bin/env node
const program = require('commander')
const chalk = require('chalk')
const semver = require('semver')

const packageJson = require('../package.json')

const requiredVersion = packageJson.engines.node
function checkNodeVersion(wanted, id) {
  if (!semver.satisfies(process.version, wanted)) {
    console.log(
      chalk.red(
        `当前你的 Node 版本为 ${process.version}，运行${id} 需要 Node ${wanted} 以上版本。
请升级你的 Node`
      )
    )
    process.exit(1)
  }
}
checkNodeVersion(requiredVersion, packageJson.name)

if (process.argv[2] && process.argv[2] === '-v') {
  process.argv[2] = '-V'
}
program.version(packageJson.version)

const loadCommand = require('../lib/load-command')(program)

program
  .command('serve [entry]')
  .alias('start')
  .description('start local sever show slide')
  .option('-p, --port [port]', 'set server port ', 8080)
  .option('--https', 'use https ', 8080)
  .option('-H, --host [host]', 'set host address', '0.0.0.0')
  .action((entry, cmd) => {
    loadCommand('serve', entry, cleanArgs(cmd))
  })
  .on('--help', function() {
    console.log('  Examples:')
    console.log()
    console.log('  nodeppt serve demo.md')
    console.log('  nodeppt serve demo.md -p 8080')
    console.log()
  })

program
  .command('create')
  .alias('new')
  .usage('[filename] [option]')
  .description('create a slide')
  .option('-d, --dir [path]', 'set slide file destination path')
  .action((filename, options) => {
    if (typeof filename === 'object') {
      console.log('ERROR: please input filename！'.bold.red)
      this.outputHelp()
      return
    }
    nodeppt.create(filename, options)
  })
  .on('--help', function() {
    console.log('  Examples:')
    console.log()
    console.log('  nodeppt create myslide')
    console.log('  nodeppt create myslide -d D:/webppt')
    console.log()
  })

function assetPathWarn() {
  console.warn('The asset-path params will be ignored when output all files.')
}

program
  .command('generate')
  .alias('release')
  .usage('[file_path] [save_path]')
  .description('export html file')
  .option('-a, --all [false]', 'output all style(include js,css) file', false)
  .option(
    '-p, --asset-path [path]',
    'set the relative path of html to assets(in website), ignored when -a is specified',
    '.'
  )
  .action(function(cmd, output, options) {
    var filename = ''
    var shouldAll = false
    var path = ''
    if (typeof output !== 'string') {
      options = output
      output = undefined
    }

    if (typeof cmd === 'string') {
      filename = cmd
      shouldAll = options.all
      if (options.assetPath && shouldAll) {
        assetPathWarn()
      } else {
        path = options.assetPath
      }
    } else if (typeof cmd === 'object') {
      shouldAll = cmd.all
      output = cmd.output
      if (cmd.assetPath && shouldAll) {
        assetPathWarn()
      } else {
        path = cmd.assetPath
      }
    }

    nodeppt.generate(filename, output, shouldAll, path || '')
  })
  .on('--help', function() {
    console.log('  Examples:')
    console.log()
    console.log('  nodeppt generate /markdown/path.md /output/path')
    console.log('  nodeppt generate /markdown/path.md /output/path -a')
    console.log('  nodeppt generate /markdown/path.md /output/path -p ../lib/nodeppt')
    console.log()
  })

program
  .command('pdf')
  .description('export pdf file. ' + 'Deprecated'.bold.red)
  .action(function(httpUrl, savePath) {
    console.log('  Warning: '.bold.red + 'This command has been ' + 'Removed'.bold.red)
  })
  .on('--help', function() {
    console.log(' Warning: '.bold.red + 'This command has been ' + 'Removed'.bold.red)
  })

program.parse(process.argv)

if (!program.args[0]) {
  process.stdout.write(program.helpInformation())
  program.emit('--help')
}

function cleanArgs(cmd) {
  const args = {}
  cmd.options.forEach(o => {
    const key = o.long.replace(/^--/, '')
    // if an option is not present and Command has a method with the same name
    // it should not be copied
    if (typeof cmd[key] !== 'function' && typeof cmd[key] !== 'undefined') {
      args[key] = cmd[key]
    }
  })
  return args
}
